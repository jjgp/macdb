//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: macdb.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// To build a server, implement a class that conforms to this protocol.
public protocol MacDB_WindowProvider: CallHandlerProvider {
  func capture(request: MacDB_WindowInfo, context: StreamingResponseCallContext<MacDB_WindowCapture>) -> EventLoopFuture<GRPCStatus>
  func touch(request: MacDB_WindowPoint, context: StatusOnlyCallContext) -> EventLoopFuture<MacDB_WindowTouch>
}

extension MacDB_WindowProvider {
  public var serviceName: String { return "MacDB.Window" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Capture":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.capture(request: request, context: context)
        }
      }

    case "Touch":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.touch(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

